:compat-mode:
[[_moving_in_atom]]
=== Moving in Atom

While it's pretty easy to move around Atom by clicking with the mouse or using the arrow keys, there are some keybindings that may help you keep your hands on the keyboard and navigate around a little faster.

First of all, Atom ships with many of the basic Emacs keybindings for navigating a document. To go up and down a single character, you can use `cntl-P` and `cntl-N`. To go left and right a single character, you can use `cntl-B` and `cntl-F`. These are the equivalent of using the arrow keys, though some people prefer to not have to move their hands to where the arrow keys are located on their keyboard.

In addition to single character movement, there are a number of other movement keybindings.

`alt-B`, `alt-left`:: Move to beginning of word
`alt-F`, `alt-right`:: Move to end of word
`cmd-right`, `cntl-E`:: Move to end of line
`cmd-left`, `cntl-A`:: Move to first character of line
`cmd-up`:: Move to top of file
`cmd-down`:: Move to bottom of file

You can also move directly to a specific line (and column) number with `cntl-G`. This will bring up a dialog that asks which line you would like to jump to. You can also use the `row:column` syntax to jump to a character in that line as well.

.Go directly to a line
image::images/goto.png[Go to line]

==== Navigating by Symbols

You can also jump around a little more informatively. To jump to a symbol such as a method definition, press `cmd-r`. This opens a list of all symbols in the current file, which you can fuzzy filter similarly to `cmd-t`. To search for symbols across your project, use `cmd-shift-r`.

.Search by symbol across your project
image::images/symbol.png[Search by symbol across your project]

You can also use `ctrl-alt-down` to jump directly to the declaration of the method or function under the cursor.

First you'll need to make sure you have `tags` (or `TAGS`) file generated for your project. This can be done by installing http://ctags.sourceforge.net[ctags] and running a command such as `ctags -R src/` from the command line in your project's root directory.

If you're on a Mac using http://brew.sh/[Homebrew], you can just run `brew install ctags`.

You can customize how tags are generated by creating your own `.ctags` file in your home directory (`~/.ctags`). An example can be found https://github.com/atom/symbols-view/blob/master/lib/.ctags[here].

The symbols navigation functionality is implemented in the https://github.com/atom/symbols-view[atom/symbols-view] package.

[[_atom_bookmarks]]
==== Atom Bookmarks

Atom also has a great way to bookmark specific lines in your project so you can jump back to them quickly.

If you press `cmd-F2`, Atom will toggle a ``bookmark'' on the current line. You can set these throughout your project and use them to quickly find and jump to important lines of your project. A small bookmark symbol is added to the line gutter, like on line 73 of <<_bookmarks_image>>.

If you hit `F2`, Atom will jump to the next bookmark in the file you currently have focused. If you use `shift-F2` it will cycle backwards through them instead.

You can also see a list of all your projects current bookmarks and quickly filter them and jump to any of them by hitting `cntl-F2`.

[[_bookmarks_image]]
.View and filter bookmarks.
image::images/bookmarks.png[]

The bookmarks functionality is implemented in the https://github.com/atom/bookmarks[atom/bookmarks] package.

[[_atom_selections]]
=== Atom Selections

Selecting ranges of text in Atom can be useful for a number of things. It can be for scoping certain actions like deleting, searching or indenting. It can also be helpful for things like quoting or bracketing text.

Selections mirror many of the movement commands. They're actually exactly the same keybindings as the movement commands, but with a `shift` key added in.

`cntl-shift-P`:: Select up
`cntl-shift-N`:: Select down
`cntl-shift-B`:: Select previous character
`cntl-shift-F`:: Select next character
`alt-shift-B`, `alt-shift-left`:: Select to beginning of word
`alt-shift-F`, `alt-shift-right`:: Select to end of word
`cntl-shift-E`, `cmd-shift-right`:: Select to end of line
`cntl-shift-A`, `cmd-shift-left`:: Select to first character of line
`cmd-shift-up`:: Select to top of file
`cmd-shift-down`:: Select to bottom of file

In addition to the cursor movement selection commands, there are also a few commands that help with selecting specific areas of content.

`cmd-A`:: Select the entire buffer
`cmd-L`:: Select entire line
`cntl-shift-W`:: Select current word

[[_working_with_text]]
=== Editing and Deleting Text

So far we've looked at a number of ways to move around and select regions of a file, so now lets actually change some of that text. Obviously you can type in order to insert characters, but there are also a number of ways to delete and manipulate text that could come in handy.

==== Basic Manipulation

There are a handful of cool keybindings for basic text manipulation that might come in handy. These range from moving around lines of text and duplicating lines to changing the case.

`cntl-T`:: Transpose characters. This swaps the two characters on either side of the cursor.

`cmd-J`:: Join the next line to the end of the current line

`cntl-cmd-up`, `cntl-cmd-down`:: Move the current line up or down

`cmd-shift-D`:: Duplicate the current line

`cmd-K, cmd-U`:: Upper case the current word

`cmd-K, cmd-L`:: Lower case the current word

Atom also has built in functionality to re-flow a paragraph to hard-wrap at a given maximum line length. You can format the current selection to have lines no longer than 80 (or whatever number `editor.preferredLineLength` is set to) characters using `cmd-alt-Q`. If nothing is selected, the current paragraph will be reflowed.

==== Deleting and Cutting

You can also delete or cut text out of your buffer with some shortcuts. Be ruthless.

`cntl-shift-K`:: Delete current line

`cmd-delete`:: Delete to end of line (`cmd-fn-backspace` on mac)

`cntl-K`:: Cut to end of line

`cmd-backspace`:: Delete to beginning of line

`alt-backspace`, `alt-H`:: Delete to beginning of word

`alt-delete`, `alt-D`:: Delete to end of word

==== Multiple Cursors and Selections

One of the cool things that Atom can do out of the box is support multiple cursors. This can be incredibly helpful in manipulating long lists of text.

`cmd-click`:: Add new cursor

`cmd-shift-L`:: Convert a multi-line selection into multiple cursors

`cntl-shift-up`, `cntl-shift-up`:: Add another cursor above/below the current cursor

`cntl-cmd-G`:: Select all words in document that are the same as the one under the current cursor(s)

Using these commands you can place cursors in multiple places in your document and effectively execute the same commands in multiple places at once.

.Using multiple cursors
image::images/multiple-cursors.gif[using multiple cursors]

This can be incredibly helpful in doing many type of repetitive tasks such as renaming variables or changing the format of some text. You can use this with almost any plugin or command - for example, changing case and moving or duplicating lines.

You can also use the mouse to select text with the `command` key pressed down to select multiple regions of your text simultaneously.

==== Whitespace

Atom comes with a couple of tools to help you manage the whitespace in your document. These tools are implemented in the https://github.com/atom/whitespace[atom/whitespace] package.

The first is a command that converts leading spaces to tabs and the equivalent for changing tabs into spaces. If you're working with a document that has mixed whitespace, these commands can be great for helping to normalize the file. There are no keybindings for these, so you will have to search your command palette for "Convert Spaces to Tabs" (or vice versa) to run one of these commands.

The whitespace helper tools are maintained as a separate package and so the settings for it can be managed from the page for the `whitespace` package.

.Managing your whitespace settings
image::images/whitespace.png[whitespace settings]

Note that the ``Remove Training Whitespace'' option is on by default. This means that every time you save any file opened in Atom, it will strip all trailing whitesapce from the file. If you want to disable this, go to the `whitespace` package in your settings panel and uncheck that option.

Atom will also by default ensure that your file has a trailing newline. You can also disable this option on that screen.

==== Brackets

Atom ships with intelligent and easy to use bracket handling.

It will by default highlight [], (), and {} style brackets when your cursor is over them. It will also highlight matching XML and HTML tags.

Atom will also automatically autocomplete [], (), and {}, "", '', “”, ‘’, «», ‹›, and backticks when you type the leading one. If you have a selection and you type any of these opening brackets or quotes, Atom will enclose the selection with the opening and closing brackets or quotes.

There are a few other interesting bracket related commands that you can use.

`ctrl-m`:: Jump to the bracket matching the one adjacent to the cursor. It jumps to the nearest enclosing bracket when there's no adjacent bracket.

`ctrl-cmd-m`:: Select all the text inside the current brackets

`alt-cmd-.`:: Close the current XML/HTML tag

The brackets functionality is implemented in the https://github.com/atom/bracket-matcher[atom/bracket-matcher] package. Like all of these packages, to change defaults related to brackets handling, or to disable it entirely, you can navigate to this package in the Settings view.

==== Encoding

Atom also ships with some basic file encoding support should you find yourself working with non-UTF-8 encoded files, or should you wish to create one.

`cntl-shift-U`:: Toggle menu to change file encoding

If you pull up the file encoding dialog, you can choose an alternate file encoding to save your file in. Normally it will auto-detect the encoding if it can, otherwise it will default to UTF-8. New files will also be UTF-8 files by default.

.Changing your file encoding
image::images/encodings.png[file encodings]

If you pull up the encoding menu and change the active encoding to something else, the file will be written out in that encoding the next time that you save the file.

The encoding selector is implemented in the https://github.com/atom/encoding-selector[atom/encoding-selector] package.

[[_find_replace]]
=== Find and Replace

To search within a buffer use `cmd-f`. To search the entire project use `cmd-shift-f`.

https://github.com/atom/find-and-replace

=== Autocompletion and Snippets

https://github.com/atom/snippets

https://github.com/atom/autocomplete

* autocomplete
* snippets
* emmet, autocomplete+
