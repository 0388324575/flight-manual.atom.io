[[_basic_customization]]
=== Basic Customization

* on load script
* customizing
* look/feel - css, styleguide
* default file grammar
* config settings
* language specific settings
- different wraps for different grammars


==== Customizing Key Bindings

Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors to apply styles to elements, Atom keymaps use selectors to associate keystrokes with events in specific contexts. Here's a small example, excerpted from Atom's built-in keymaps:

[source,coffee]
----
'atom-text-editor':
  'enter': 'editor:newline'

'atom-text-editor[mini] input':
  'enter': 'core:confirm'
----

This keymap defines the meaning of `enter` in two different contexts. In a normal editor, pressing `enter` emits the `editor:newline` event, which causes the editor to insert a newline. But if the same keystroke occurs inside of a select list's mini-editor, it instead emits the `core:confirm` event based on the binding in the more-specific selector.

By default, `~/.atom/keymap.cson` is loaded when Atom is started. It will always be loaded last, giving you the chance to override bindings that are defined by Atom's core keymaps or third-party packages.

You can open this file in an editor from the _Atom > Open Your Keymap_ menu.

You'll want to know all the commands available to you. Open the Settings panel (`cmd-,`) and select the _Keybindings_ tab. It will show you all the keybindings currently in use.

==== Advanced Configuration

Atom loads configuration settings from the `config.cson` file in your _~/.atom_ directory, which contains CoffeeScript-style JSON: https://github.com/atom/season[CSON].

[source,coffee]
----
'core':
  'excludeVcsIgnoredPaths': true
'editor':
  'fontSize': 18
----

The configuration itself is grouped by the package name or one of the two core namespaces: `core` and `editor`.

You can open this file in an editor from the _Atom > Open Your Config_ menu.

===== Configuration Key Reference

* `core`
** `disabledPackages`: An array of package names to disable
** `excludeVcsIgnoredPaths`: Don't search within files specified by _.gitignore_
** `ignoredNames`: File names to ignore across all of Atom
** `projectHome`: The directory where projects are assumed to be located
** `themes`: An array of theme names to load, in cascading order
* `editor`
** `autoIndent`: Enable/disable basic auto-indent (defaults to `true`)
** `nonWordCharacters`: A string of non-word characters to define word boundaries
** `fontSize`: The editor font size
** `fontFamily`: The editor font family
** `invisibles`: Specify characters that Atom renders for invisibles in this hash
*** `tab`: Hard tab characters
*** `cr`: Carriage return (for Microsoft-style line endings)
*** `eol`: `\n` characters
*** `space`: Leading and trailing space characters
** `preferredLineLength`: Identifies the length of a line (defaults to `80`)
** `showInvisibles`: Whether to render placeholders for invisible characters (defaults to `false`)
** `showIndentGuide`: Show/hide indent indicators within the editor
** `showLineNumbers`: Show/hide line numbers within the gutter
** `softWrap`: Enable/disable soft wrapping of text within the editor
** `softWrapAtPreferredLineLength`: Enable/disable soft line wrapping at `preferredLineLength`
** `tabLength`: Number of spaces within a tab (defaults to `2`)
* `fuzzyFinder`
** `ignoredNames`: Files to ignore *only* in the fuzzy-finder
* `whitespace`
** `ensureSingleTrailingNewline`: Whether to reduce multiple newlines to one at the end of files
** `removeTrailingWhitespace`: Enable/disable striping of whitespace at the end of lines (defaults to `true`)
* `wrap-guide`
** `columns`: Array of hashes with a `pattern` and `column` key to match the
the path of the current editor to a column position.

==== Quick Personal Hacks

===== init.coffee

When Atom finishes loading, it will evaluate _init.coffee_ in your _~/.atom_ directory, giving you a chance to run arbitrary personal CoffeeScript code to make customizations. You have full access to Atom's API from code in this file. If customizations become extensive, consider creating a package, which we will cover in <<_creating_a_package>>.

You can open this file in an editor from the _Atom > Open Your Init Script_ menu.

For example, if you have the Audio Beep configuration setting enabled, you could add the following code to your _~/.atom/init.coffee_ file to have Atom greet you with an audio beep every time it loads:

[source,coffee]
----
atom.beep()
----

This file can also be named _init.js_ and contain JavaScript code.

===== styles.less

If you want to apply quick-and-dirty personal styling changes without creating an entire theme that you intend to publish, you can add styles to the _styles.less_ file in your _~/.atom_ directory.

You can open this file in an editor from the _Atom > Open Your Stylesheet_ menu.

For example, to change the color of the cursor, you could add the following rule to your _~/.atom/styles.less_ file:

[source,css]
----
atom-text-editor.is-focused .cursor {
  border-color: pink;
}
----

Unfamiliar with LESS? You can read more about it at http://www.lesscss.org

This file can also be named _styles.css_ and contain CSS.
