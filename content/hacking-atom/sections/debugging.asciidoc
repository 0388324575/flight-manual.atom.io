---
title: Debugging
---
=== Debugging

Atom provides several tools to help you understand unexpected behavior and debug problems. This guide describes some of those tools and a few approaches to help you debug and provide more helpful information when https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues[submitting issues]:

==== Update to the latest version

You might be running into an issue which was already fixed in a more recent version of Atom than the one you're using.

If you're building Atom from source, pull down the latest version of master and https://github.com/atom/atom#building[re-build].

If you're using released version, check which version of Atom you're using:

```shell
$ atom --version
0.178.0
```

Head on over to the https://github.com/atom/atom/releases[list of releases] and see if there's a more recent release. You can update to the most recent release by downloading Atom from the releases page, or with the in-app auto-updater. The in-app auto-updater checks for and downloads a new version after you restart Atom, or if you use the `Atom > Check for Update` menu option.

==== Check if the problem shows up in safe mode

A large part of Atom's functionality comes from packages you can install. Atom will also execute the code in your link:/hacking-atom/sections/the-init-file[Init script] on startup. In some cases, these packages and the code in the Init script might be causing unexpected behavior, problems, or performance issues.

To determine if that is happening, start Atom from the terminal in safe mode:

```
$ atom --safe .
```

This starts Atom, but does not load packages from `~/.atom/packages` or `~/.atom/dev/packages` and disables loading of your Init script. If you can no longer reproduce the problem in safe mode, it's likely it was caused by one of the packages or the Init script.

If removing all content from the Init script and starting Atom normally still produces the error, then try figuring out which package is causing trouble. Start Atom normally again and open Settings (`cmd-,`). Since Settings allow you to disable each installed package, you can disable packages one by one until you can no longer reproduce the issue. Restart (`cmd-q`) or reload (`cmd-ctrl-alt-l`) Atom after you disable each package to make sure it's completely gone.

When you find the problematic package, you can disable or uninstall the package, and consider creating an issue on the package's GitHub repository.

==== Check for linked packages

If you develop or contribute to Atom packages, there may be left-over packages linked to your `~/.atom/packages` or `~/.atom/dev/packages` directories. You can use the `apm links` command to list all linked packages:

```shell
$ apm links
/Users/octocat/.atom/dev/packages (0)
└── (no links)
/Users/octocat/.atom/packages (1)
└── color-picker -> /Users/octocat/github/color-picker
```

You can remove links using the `apm unlink` command:

```shell
$ apm unlink color-picker
Unlinking /Users/octocat/.atom/packages/color-picker ✓
```

See `apm links --help` and `apm unlink --help` for more information on these commands.

==== Check Atom and package settings

In some cases, unexpected behavior might be caused by misconfigured or unconfigured settings in Atom or in one of the packages.

Open Atom's https://github.com/atom/settings-view[Settings View] with `cmd-,` the `Atom > Preferences` menu option, or the `Settings View: Open` command from the https://github.com/atom/command-palette[Command Palette].

.Settings View
image::../../images/settings-view.png[settings view]

Check Atom's settings in the Settings pane, there's a description of each configuration option https://atom.io/docs/latest/customizing-atom#configuration-key-reference[here]. For example, if you want Atom to hide the invisible symbols representing whitespace characters, disable the "Show Invisibles" option.

Most of these options are also available on a per-language basis which means that they may be different for specific languages (e.g. JavaScript or Python). To check the per-language settings, open the settings for the `language-*` package under Settings View > Packages (e.g. the `language-javascript` or `langauge-python` package).

Since Atom ships with a set of packages and you can also install additional packages yourself, check the list of packages and their settings. For example, if you'd like to get rid of the vertical line in the middle of the editor, disable the https://atom.io/packages/wrap-guide[Wrap Guide package]. And if you don't like it when Atom strips trailing whitespace or ensures that there's a single trailing newline in the file, you can configure that in the https://atom.io/packages/whitespace[Whitespace packages'] settings.

.Package Settings
image::../../images/package-settings.png[package settings]

==== Check your config files

You might have defined some custom styles, keymaps or snippets in link:/using-atom/sections/basic-customization[your config files]. In some situations, these personal hacks might be causing the unexpected behavior you're observing so try clearing those files and restarting Atom.

==== Check the keybindings

If a command is not executing when you hit a keystroke or the wrong command is executing, there might be an issue with the keybindings for that keystroke. Atom ships with the https://atom.io/packages/keybinding-resolver[Keybinding resolver], a neat package which helps you understand which keybindings are executed.

Show the keybinding resolver with `cmd-.` or with ``Key Binding Resolver: Show'' from the Command palette. With the keybinding resolver shown, hit a keystroke:

.Keybinding Resolver
image::../../images/keybinding-resolver.png[keybinding resolver]

The keybinding resolver shows you a list of keybindings that exist for the keystroke, where each item in the list has the following:

* the command for the keybinding,
* the CSS selector used to define the context in which the keybinding is valid, and
* the file in which the keybinding is defined.

Of all the keybindings that are listed (grey color), at most one keybinding is matched and executed (green color). If the command you wanted to trigger isn't listed, then a keybinding for that command hasn't been defined. More keybindings are provided by https://atom.io/packages[packages] and you can define your own keybindings as we saw in link:/using-atom/sections/basic-customization#_customizing_keybindings[Customizing_keybindings].

If multiple keybindings are matched, Atom determines which keybinding will be executed based on the https://atom.io/docs/latest/advanced/keymaps#specificity-and-cascade-order[specificity of the selectors and the order in which they were loaded]. If the command you wanted to trigger is listed in the Keybinding resolver, but wasn't the one that was executed, this is normally explained by one of two causes:

* the keystroke was not used in the context defined by the keybinding's selector. For example, you can't trigger the ``Tree View: Add File'' command if the Tree View is not focused, or
* there is another keybinding that took precedence. This often happens when you install a package which defines keybindings that conflict with existing keybindings. If the package's keybindings have selectors with higher specificity or were loaded later, they'll have priority over existing ones.

Atom loads core Atom keybindings and package keybindings first, and user-defined keybindings last. Since user-defined keybindings are loaded last, you can use your `keymap.cson` file to tweak the keybindings and sort out problems like these. For example, you can remove keybindings with https://atom.io/docs/latest/behind-atom-keymaps-in-depth#removing-bindings[the `unset!` directive].

If you notice that a package's keybindings are taking precedence over core Atom keybindings, it might be a good idea to report the issue on the package's GitHub repository.

==== Check for errors in the developer tools

When an error is thrown in Atom, you will normally see a red notification which provides details about the error and allows you to create an issue on the right repository.

.Exception Notification
image::../../images/exception-notification.png[exception notification]

In some situations, instead of showing a notification, the developer tools are automatically shown with the error logged in the Console tab. However, if the dev tools are open before the error is triggered, a full stack trace for the error will be logged:

.DevTools Error
image::../../images/devtools-error.png[devtools error]

If you can reproduce the error, use this approach to get the full stack trace and https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues[report the issue].

==== Diagnose startup performance problems with the Timecop package and the `--profile-startup` command line flag

If Atom is taking a long time to start, you can use the https://github.com/atom/timecop[Timecop package] to get insight into where Atom spends time while loading.

.Timecop
image::../../images/timecop.png[timecop]

Timecop displays the following information:

* Atom startup times (e.g. time taken to launch the application, load the window, and rebuild the previously opened editors)
* File compilation times (e.g. compilation of CoffeeScript, LESS and CSON files)
* Package loading and activation times
* Theme loading and activation times

If a specific package has high load or activation times, you might consider disabling it to improve startup speed.

If the time for loading the window looks high, you can create a CPU profile for that period using the `--profile-startup` command line flag when starting Atom:

```shell
atom --profile-startup .
```

This will automatically capture a CPU profile as Atom is loading and open the dev tools once Atom loads. You can then switch to the Profiles tab of the dev tools to inspect the "startup" profile and also save it in case you want to share it in an issue.

==== Diagnose runtime performance problems with the dev tools CPU profiler

If you're experiencing performance problems in a particular situation, your https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues[reports] will be more valuable if you include a screenshot from Chrome's CPU profiler that gives some insight into what is slow.

To run a profile, open the dev tools ("Window: Toggle Dev Tools" in the https://atom.io/docs/latest/getting-started-atom-basics#command-palette[Command Palette]), navigate to the `Profiles` tab, select `Collect JavaScript CPU Profile`, and click `Start`.

image::../../images/cpu-profile-start.png[devtools profiler]

Then refocus Atom and perform the slow action to capture a recording. When finished, click `Stop`. Switch to the `Chart` view, and a graph of the recorded actions will appear. Try to zoom in on the slow area, then take a screenshot to include with your report. You can also save and post the profile data by clicking `Save` next to the profile's name (e.g. `Profile 1`) in the left panel.

image::../../images/cpu-profile-done.png[devtools profiler]

To learn more, check out the https://developer.chrome.com/devtools/docs/cpu-profiling[Chrome documentation on CPU profiling].

==== Check that you have a build toolchain installed

If you are having issues installing a package using `apm install`, this could be because the package has dependencies on libraries that contain native code and so you will need to have a C++ compiler and Python installed to be able to install it.

You can run `apm install --check` to see if `apm` can build native code on your machine.

Check out the pre-requisites in the https://github.com/atom/atom/tree/master/docs/build-instructions[build instructions] for your platform for more details.
